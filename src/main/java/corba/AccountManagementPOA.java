package corba;


/**
* corba/AccountManagementPOA.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from idlf.idl
* Monday, October 28, 2024 1:21:01 PM EAT
*/


// Interface for managing accounts in the banking system
public abstract class AccountManagementPOA extends org.omg.PortableServer.Servant
 implements corba.AccountManagementOperations, org.omg.CORBA.portable.InvokeHandler
{

  // Constructors

  private static java.util.Hashtable _methods = new java.util.Hashtable ();
  static
  {
    _methods.put ("createAccount", new java.lang.Integer (0));
    _methods.put ("getAccount", new java.lang.Integer (1));
    _methods.put ("getAllAccounts", new java.lang.Integer (2));
    _methods.put ("searchAccounts", new java.lang.Integer (3));
    _methods.put ("updateAccount", new java.lang.Integer (4));
    _methods.put ("deleteAccount", new java.lang.Integer (5));
  }

  public org.omg.CORBA.portable.OutputStream _invoke (String $method,
                                org.omg.CORBA.portable.InputStream in,
                                org.omg.CORBA.portable.ResponseHandler $rh)
  {
    org.omg.CORBA.portable.OutputStream out = null;
    java.lang.Integer __method = (java.lang.Integer)_methods.get ($method);
    if (__method == null)
      throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);

    switch (__method.intValue ())
    {
       case 0:  // corba/AccountManagement/createAccount
       {
         corba.Account account = corba.AccountHelper.read (in);
         this.createAccount (account);
         out = $rh.createReply();
         break;
       }


  // Create a new account
       case 1:  // corba/AccountManagement/getAccount
       {
         int accId = in.read_long ();
         corba.Account $result = null;
         $result = this.getAccount (accId);
         out = $rh.createReply();
         corba.AccountHelper.write (out, $result);
         break;
       }


  // Retrieve an account by its ID
       case 2:  // corba/AccountManagement/getAllAccounts
       {
         corba.Account $result[] = null;
         $result = this.getAllAccounts ();
         out = $rh.createReply();
         corba.AccountListHelper.write (out, $result);
         break;
       }


  // Get a list of all accounts
       case 3:  // corba/AccountManagement/searchAccounts
       {
         String query = in.read_string ();
         corba.Account $result[] = null;
         $result = this.searchAccounts (query);
         out = $rh.createReply();
         corba.AccountListHelper.write (out, $result);
         break;
       }


  // Search accounts based on a query
       case 4:  // corba/AccountManagement/updateAccount
       {
         corba.Account account = corba.AccountHelper.read (in);
         this.updateAccount (account);
         out = $rh.createReply();
         break;
       }


  // Update an existing account's information
       case 5:  // corba/AccountManagement/deleteAccount
       {
         int accId = in.read_long ();
         this.deleteAccount (accId);
         out = $rh.createReply();
         break;
       }

       default:
         throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);
    }

    return out;
  } // _invoke

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:corba/AccountManagement:1.0"};

  public String[] _all_interfaces (org.omg.PortableServer.POA poa, byte[] objectId)
  {
    return (String[])__ids.clone ();
  }

  public AccountManagement _this() 
  {
    return AccountManagementHelper.narrow(
    super._this_object());
  }

  public AccountManagement _this(org.omg.CORBA.ORB orb) 
  {
    return AccountManagementHelper.narrow(
    super._this_object(orb));
  }


} // class AccountManagementPOA
