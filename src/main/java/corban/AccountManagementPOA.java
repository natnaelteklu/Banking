package corban;


/**
* corban/AccountManagementPOA.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from idlnew.idl
* Monday, October 28, 2024 2:54:47 PM EAT
*/


// Interface for Account Management
public abstract class AccountManagementPOA extends org.omg.PortableServer.Servant
 implements corban.AccountManagementOperations, org.omg.CORBA.portable.InvokeHandler
{

  // Constructors

  private static java.util.Hashtable _methods = new java.util.Hashtable ();
  static
  {
    _methods.put ("createAccount", new java.lang.Integer (0));
    _methods.put ("getAccount", new java.lang.Integer (1));
    _methods.put ("getAllAccounts", new java.lang.Integer (2));
    _methods.put ("searchAccounts", new java.lang.Integer (3));
    _methods.put ("updateAccount", new java.lang.Integer (4));
    _methods.put ("deleteAccount", new java.lang.Integer (5));
    _methods.put ("deposit", new java.lang.Integer (6));
    _methods.put ("withdraw", new java.lang.Integer (7));
    _methods.put ("checkBalance", new java.lang.Integer (8));
    _methods.put ("getAccountTransactions", new java.lang.Integer (9));
    _methods.put ("transferFunds", new java.lang.Integer (10));
  }

  public org.omg.CORBA.portable.OutputStream _invoke (String $method,
                                org.omg.CORBA.portable.InputStream in,
                                org.omg.CORBA.portable.ResponseHandler $rh)
  {
    org.omg.CORBA.portable.OutputStream out = null;
    java.lang.Integer __method = (java.lang.Integer)_methods.get ($method);
    if (__method == null)
      throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);

    switch (__method.intValue ())
    {
       case 0:  // corban/AccountManagement/createAccount
       {
         corban.Account account = corban.AccountHelper.read (in);
         this.createAccount (account);
         out = $rh.createReply();
         break;
       }

       case 1:  // corban/AccountManagement/getAccount
       {
         try {
           int accId = in.read_long ();
           corban.Account $result = null;
           $result = this.getAccount (accId);
           out = $rh.createReply();
           corban.AccountHelper.write (out, $result);
         } catch (corban.AccountNotFound $ex) {
           out = $rh.createExceptionReply ();
           corban.AccountNotFoundHelper.write (out, $ex);
         }
         break;
       }

       case 2:  // corban/AccountManagement/getAllAccounts
       {
         corban.Account $result[] = null;
         $result = this.getAllAccounts ();
         out = $rh.createReply();
         corban.AccountListHelper.write (out, $result);
         break;
       }

       case 3:  // corban/AccountManagement/searchAccounts
       {
         String query = in.read_string ();
         corban.Account $result[] = null;
         $result = this.searchAccounts (query);
         out = $rh.createReply();
         corban.AccountListHelper.write (out, $result);
         break;
       }

       case 4:  // corban/AccountManagement/updateAccount
       {
         try {
           corban.Account account = corban.AccountHelper.read (in);
           this.updateAccount (account);
           out = $rh.createReply();
         } catch (corban.AccountNotFound $ex) {
           out = $rh.createExceptionReply ();
           corban.AccountNotFoundHelper.write (out, $ex);
         }
         break;
       }

       case 5:  // corban/AccountManagement/deleteAccount
       {
         try {
           int accId = in.read_long ();
           this.deleteAccount (accId);
           out = $rh.createReply();
         } catch (corban.AccountNotFound $ex) {
           out = $rh.createExceptionReply ();
           corban.AccountNotFoundHelper.write (out, $ex);
         }
         break;
       }


  // New functionalities for banking
       case 6:  // corban/AccountManagement/deposit
       {
         try {
           int accId = in.read_long ();
           double amount = in.read_double ();
           double $result = (double)0;
           $result = this.deposit (accId, amount);
           out = $rh.createReply();
           out.write_double ($result);
         } catch (corban.AccountNotFound $ex) {
           out = $rh.createExceptionReply ();
           corban.AccountNotFoundHelper.write (out, $ex);
         }
         break;
       }

       case 7:  // corban/AccountManagement/withdraw
       {
         try {
           int accId = in.read_long ();
           double amount = in.read_double ();
           double $result = (double)0;
           $result = this.withdraw (accId, amount);
           out = $rh.createReply();
           out.write_double ($result);
         } catch (corban.AccountNotFound $ex) {
           out = $rh.createExceptionReply ();
           corban.AccountNotFoundHelper.write (out, $ex);
         } catch (corban.InsufficientFunds $ex) {
           out = $rh.createExceptionReply ();
           corban.InsufficientFundsHelper.write (out, $ex);
         }
         break;
       }

       case 8:  // corban/AccountManagement/checkBalance
       {
         try {
           int accId = in.read_long ();
           double $result = (double)0;
           $result = this.checkBalance (accId);
           out = $rh.createReply();
           out.write_double ($result);
         } catch (corban.AccountNotFound $ex) {
           out = $rh.createExceptionReply ();
           corban.AccountNotFoundHelper.write (out, $ex);
         }
         break;
       }

       case 9:  // corban/AccountManagement/getAccountTransactions
       {
         try {
           int accId = in.read_long ();
           corban.Transaction $result[] = null;
           $result = this.getAccountTransactions (accId);
           out = $rh.createReply();
           corban.TransactionListHelper.write (out, $result);
         } catch (corban.AccountNotFound $ex) {
           out = $rh.createExceptionReply ();
           corban.AccountNotFoundHelper.write (out, $ex);
         }
         break;
       }


  // Fund transfer between accounts
       case 10:  // corban/AccountManagement/transferFunds
       {
         try {
           int fromAccId = in.read_long ();
           int toAccId = in.read_long ();
           double amount = in.read_double ();
           this.transferFunds (fromAccId, toAccId, amount);
           out = $rh.createReply();
         } catch (corban.AccountNotFound $ex) {
           out = $rh.createExceptionReply ();
           corban.AccountNotFoundHelper.write (out, $ex);
         } catch (corban.InsufficientFunds $ex) {
           out = $rh.createExceptionReply ();
           corban.InsufficientFundsHelper.write (out, $ex);
         }
         break;
       }

       default:
         throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);
    }

    return out;
  } // _invoke

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:corban/AccountManagement:1.0"};

  public String[] _all_interfaces (org.omg.PortableServer.POA poa, byte[] objectId)
  {
    return (String[])__ids.clone ();
  }

  public AccountManagement _this() 
  {
    return AccountManagementHelper.narrow(
    super._this_object());
  }

  public AccountManagement _this(org.omg.CORBA.ORB orb) 
  {
    return AccountManagementHelper.narrow(
    super._this_object(orb));
  }


} // class AccountManagementPOA
